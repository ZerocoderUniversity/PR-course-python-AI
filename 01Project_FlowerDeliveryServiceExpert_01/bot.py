import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flowerdelivery_master.settings')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ settings
django.setup()

import asyncio
from asgiref.sync import sync_to_async
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import Message
from aiogram.filters import Command
from config import TELEGRAM_BOT_TOKEN
from django.utils import timezone
import xlsxwriter
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from django.conf import settings
from asgiref.sync import sync_to_async
from django.db.models import F, Sum, Count
from aiogram.types import InputFile
from aiogram.types import FSInputFile
import matplotlib as plt
import pandas as pd
from datetime import timedelta, date
from orders.models import Order, Product  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥–µ–ª–∏
from io import BytesIO



# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django
from orders.models import Order

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
router = Router()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Router –æ—Ç–¥–µ–ª—å–Ω–æ
dp.include_router(router)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º router –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É




# –ö–æ–º–∞–Ω–¥–∞ /start —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ FlowerDelivery! üå∏\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂.\n"
        "–î–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /help."
    )

# –ö–æ–º–∞–Ω–¥–∞ /help —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/help - –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "/orders - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å—ã\n"
        "/take_order - –í–∑—è—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É\n"
        "/sales_report - –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º\n"
        "/sales_chart - –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –±—É–∫–µ—Ç–æ–≤\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    )




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
@dp.message(Command("orders"))
async def list_orders(message: Message):
    orders = await sync_to_async(list)(Order.objects.select_related('product').all())
    if not orders:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    response = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
    for order in orders:
        product_name = await sync_to_async(lambda: order.product.name)()
        response += (
            f"–ó–∞–∫–∞–∑ ‚Ññ{order.id}\n–ü—Ä–æ–¥—É–∫—Ç: {product_name}\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {order.recipient_name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {order.recipient_phone}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_address}\n"
            f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_date} –í—Ä–µ–º—è: {order.delivery_time}\n"
            f"–°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n\n"
        )
    await message.answer(response)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞
@dp.message(Command("update_order"))
async def choose_order_for_update(message: types.Message):
    orders = await sync_to_async(list)(Order.objects.filter(status="ordered"))
    if not orders:
        await message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for order in orders:
        button = InlineKeyboardButton(text=f"–ó–∞–∫–∞–∑ ‚Ññ{order.id}", callback_data=f"select_order:{order.id}")
        keyboard.inline_keyboard.append([button])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞
@router.callback_query(lambda c: c.data and c.data.startswith("select_order"))
async def select_order_callback(callback_query: types.CallbackQuery):
    order_id = callback_query.data.split(":")[1]
    order = await sync_to_async(Order.objects.get)(id=order_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞ –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data=f"update_status:delivery:{order_id}")],
            [InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω", callback_data=f"update_status:completed:{order_id}")]
        ]
    )

    await callback_query.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–∫–∞–∑ ‚Ññ{order.id}.\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {order.get_status_display()}.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
@router.callback_query(lambda c: c.data and c.data.startswith("update_status"))
async def update_order_status_callback(callback_query: types.CallbackQuery):
    _, new_status, order_id = callback_query.data.split(":")
    order = await sync_to_async(Order.objects.get)(id=order_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    order.status = new_status
    await sync_to_async(order.save)()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback_query.message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {order.get_status_display()}.")


@dp.message(Command("sales_report"))
async def sales_report(message: types.Message):
    now = timezone.now()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º–∑–æ–Ω—ã —É –¥–∞—Ç
    async def get_orders_without_timezone(period):
        orders = await sync_to_async(list)(
            Order.objects.filter(created_at__gte=now - timezone.timedelta(days=period))
            .values('id', 'created_at', 'product__name', 'product__price')
        )
        for order in orders:
            order['created_at'] = order['created_at'].replace(tzinfo=None)  # –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∑–æ–Ω—É
        return orders

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü –∏ –≥–æ–¥
    orders_week = await get_orders_without_timezone(7)
    orders_month = await get_orders_without_timezone(30)
    orders_year = await get_orders_without_timezone(365)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    week_text, week_revenue = await format_order_details(orders_week)
    month_text, month_revenue = await format_order_details(orders_month)
    year_text, year_revenue = await format_order_details(orders_year)

    report_text = (
        f"–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º:\n\n"
        f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:\n{week_text}\n–û–±—â–∞—è —Å—É–º–º–∞: {week_revenue} —Ä—É–±\n\n"
        f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:\n{month_text}\n–û–±—â–∞—è —Å—É–º–º–∞: {month_revenue} —Ä—É–±\n\n"
        f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥:\n{year_text}\n–û–±—â–∞—è —Å—É–º–º–∞: {year_revenue} —Ä—É–±"
    )
    await message.answer(report_text)

async def format_order_details(orders):
    orders_text = ""
    total_revenue = 0
    order_count = 0  # –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤

    for order in orders:
        order_total = order['product__price']  # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        total_revenue += order_total
        order_count += 1
        orders_text += (
            f"ID –∑–∞–∫–∞–∑–∞: {order['id']}\n"
            f"–î–∞—Ç–∞: {order['created_at']:%Y-%m-%d %H:%M}\n"
            f"–¢–æ–≤–∞—Ä: {order['product__name']}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {order_total} —Ä—É–±\n\n"
        )

    summary_text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {order_count}, –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É: {total_revenue} —Ä—É–±\n\n"
    return summary_text + orders_text, total_revenue


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –±—É–∫–µ—Ç–æ–≤
import matplotlib.pyplot as plt
from io import BytesIO
from aiogram.types import BufferedInputFile


@dp.message(Command("sales_chart"))
async def sales_chart(message: types.Message):
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –±—É–∫–µ—Ç–æ–≤
    async def get_product_counts(period):
        orders = await sync_to_async(list)(
            Order.objects.filter(created_at__gte=now - timezone.timedelta(days=period))
            .values('product__name')
        )
        product_counts = {}
        for order in orders:
            product_name = order['product__name']
            if product_name in product_counts:
                product_counts[product_name] += 1
            else:
                product_counts[product_name] = 1
        return product_counts

    now = timezone.now()
    week_counts = await get_product_counts(7)
    month_counts = await get_product_counts(30)
    year_counts = await get_product_counts(365)

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –±—É–∫–µ—Ç–æ–≤ –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    product_names = set(week_counts.keys()).union(month_counts.keys(), year_counts.keys())

    # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    week_values = [week_counts.get(name, 0) for name in product_names]
    month_values = [month_counts.get(name, 0) for name in product_names]
    year_values = [year_counts.get(name, 0) for name in product_names]

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig, ax = plt.subplots(figsize=(10, 6))
    bar_width = 0.2
    x = range(len(product_names))

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞—Ü–∏–µ–π
    ax.bar([i - bar_width for i in x], week_values, width=bar_width, label="–ù–µ–¥–µ–ª—è", color="blue")
    ax.bar(x, month_values, width=bar_width, label="–ú–µ—Å—è—Ü", color="orange")
    ax.bar([i + bar_width for i in x], year_values, width=bar_width, label="–ì–æ–¥", color="green")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    ax.set_xticks(x)
    ax.set_xticklabels(product_names, rotation=45, ha="right")
    ax.set_title("–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –±—É–∫–µ—Ç–æ–≤")
    ax.set_xlabel("–ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞")
    ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤")
    ax.legend()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±—É—Ñ–µ—Ä
    buf = BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ —Ñ–æ—Ç–æ
    await message.answer_photo(photo=BufferedInputFile(buf.getvalue(), filename="popularity_chart.png"),
                               caption="–ì—Ä–∞—Ñ–∏–∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –±—É–∫–µ—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü –∏ –≥–æ–¥")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())
