import sqlite3
import telebot
import time
import logging
from config import TELEGRAM_BOT_TOKEN, TG_CHAT_ID

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
DB_PATH = 'db.sqlite3'  # –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å
TELEGRAM_TOKEN = TELEGRAM_BOT_TOKEN
CHAT_ID = TG_CHAT_ID
CHECK_INTERVAL = 30  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)

def fetch_new_orders():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            query = """
            SELECT orders_order.id, orders_order.address, orders_order.user_comment,
                   catalog_product.name AS product_name, catalog_product.price,
                   account_user.first_name, account_user.last_name, account_user.phone_number
            FROM orders_order
            JOIN catalog_product ON orders_order.product_id = catalog_product.id
            JOIN account_user ON orders_order.user_id = account_user.id
            WHERE orders_order.status = 'new'
            """
            cursor.execute(query)
            return cursor.fetchall()
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def update_order_status(order_id):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ 'notified'.
    """
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE orders_order SET status = 'notified' WHERE id = ?", (order_id,))
            conn.commit()
    except sqlite3.Error as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

def send_order_notification(order):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ Telegram.
    """
    order_id, address, comment, product_name, price, first_name, last_name, phone_number = order
    message = (
        f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑* #{order_id}\n\n"
        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {first_name} {last_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
        f"üè° –ê–¥—Ä–µ—Å: {address}\n"
        f"üìå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '–ù–µ—Ç'}\n\n"
        f"üéÅ –¢–æ–≤–∞—Ä: {product_name}\n"
        f"üí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ"
    )
    try:
        bot.send_message(CHAT_ID, message, parse_mode='Markdown')
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")

def start_bot():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    while True:
        orders = fetch_new_orders()
        for order in orders:
            send_order_notification(order)
            update_order_status(order[0])
        time.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
    start_bot()
