import os
import sys


from datetime import datetime
from decimal import Decimal
from pathlib import Path

import asyncio

import django
from asgiref.sync import sync_to_async
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile

from django.conf import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower_delivery.settings')
django.setup()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π

from django.contrib.auth.models import User

from catalog.models import Flower
from orders.models import Order
from users.models import Profile


API_TOKEN = '7843222297:AAGIsnQ6v247JoCJUcUOfiNl_aCAf30fFho'
bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FlowerDelivery! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ü–≤–µ—Ç–æ–≤.")


@sync_to_async
def get_all_flowers():
    return list(Flower.objects.all())  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º QuerySet –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
@sync_to_async
def check_flowers_exist():
    return Flower.objects.exists()


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∫–∞ –ø–æ id
@sync_to_async
def get_flower_by_id(flower_id):
    return Flower.objects.get(id=flower_id)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FlowerDelivery! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ü–≤–µ—Ç–æ–≤.")



# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
@dp.message(Command("catalog"))
async def show_catalog(message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–≤–µ—Ç—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        if await check_flowers_exist():
            flowers = await get_all_flowers()
            for flower in flowers:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                image_path = Path(settings.MEDIA_ROOT) / flower.image.name if flower.image else None

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
                description = flower.description[:500] + '...' if len(flower.description) > 500 else flower.description

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∏, –¥–æ–±–∞–≤–ª—è—è ID –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                caption = f"ID —Ü–≤–µ—Ç–∫–∞: {flower.id}\n{flower.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–¶–µ–Ω–∞: {flower.price} —Ä—É–±."
                if len(caption) > 1024:
                    caption = caption[:1021] + "..."  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ü–≤–µ—Ç–∫–∞
                if image_path and image_path.exists():
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    photo = FSInputFile(image_path)
                    await bot.send_photo(
                        chat_id=message.chat.id,
                        photo=photo,
                        caption=caption
                    )
                else:
                    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    await message.reply(
                        f"ID: {flower.id}\n{flower.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–¶–µ–Ω–∞: {flower.price} —Ä—É–±.\n(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
                    )
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞
            await message.reply("–í–≤–µ–¥–∏—Ç–µ /login <–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–ø–∞—Ä–æ–ª—å> –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ \n–í–≤–µ–¥–∏—Ç–µ /order <ID —Ü–≤–µ—Ç–∫–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
        else:
            await message.reply("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {str(e)}")





# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram ID –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@sync_to_async
def link_telegram_id_to_user(telegram_id, username):
    try:
        user = User.objects.get(username=username)
        user.profile.telegram_id = telegram_id
        user.profile.save()
        return user
    except User.DoesNotExist:
        return None


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
@sync_to_async
def get_user_by_telegram_id(telegram_id):
    try:
        profiles = Profile.objects.filter(telegram_id=telegram_id)
        if profiles.exists():
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            if profiles.count() > 1:
                print(f"Warning: Multiple profiles found for telegram_id {telegram_id}. Using the first one.")
            return profiles.first().user
        return None
    except Profile.DoesNotExist:
        return None


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
@sync_to_async
def create_order_in_db(user, flower, quantity, address, email, phone):
    return Order.objects.create(
        user=user,
        flower=flower,
        quantity=quantity,
        price=flower.price,
        address=address,
        email=email,
        phone=phone,
        order_date=datetime.now()
    )


# –ö–æ–º–∞–Ω–¥–∞ /login –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram ID –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message(Command("login"))
async def login_user(message: Message):
    try:
        _, username, password  = message.text.split(maxsplit=2)
        telegram_id = message.from_user.id  # —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        user = await link_telegram_id_to_user(telegram_id, username)

        if user:
            await message.reply(f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ {user.username}.")
        else:
            await message.reply(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ: https://–≤–∞—à_—Å–∞–π—Ç.ru/registration")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /login <–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–ø–∞—Ä–æ–ª—å>.")



# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.message(Command("order"))
async def create_order(message: Message):
    telegram_id = message.from_user.id
    user = await get_user_by_telegram_id(telegram_id)

    if user:
        try:
            # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏
            parts = message.text.split()

            if len(parts) != 3:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /order <ID —Ü–≤–µ—Ç–∫–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")

            _, flower_id, quantity = parts
            flower_id = int(flower_id)
            quantity = int(quantity)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–≤–µ—Ç–∫–µ
            flower = await sync_to_async(Flower.objects.get)(id=flower_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ü–≤–µ—Ç–∫–∞ –µ—Å—Ç—å —Ü–µ–Ω–∞
            if flower.price is None or not isinstance(flower.price, (int, float, Decimal)):
                await message.reply("–û—à–∏–±–∫–∞: —É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∫–∞ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            address = user.profile.address
            email = user.profile.email
            phone = user.profile.phone

            # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
            order = await create_order_in_db(user, flower, quantity, address, email, phone)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            total_price = flower.price * quantity
            await message.reply(f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                                f"–¶–≤–µ—Ç–æ–∫: {flower.name}\n"
                                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
                                f"–°—É–º–º–∞: {total_price} —Ä—É–±.\n"
                                f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.order_date}")
        except ValueError as ve:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö
            await message.reply(f"–û—à–∏–±–∫–∞: {str(ve)}")
        except Flower.DoesNotExist:
            # –ï—Å–ª–∏ —Ü–≤–µ—Ç–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω
            await message.reply("–û—à–∏–±–∫–∞: —Ü–≤–µ—Ç–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.reply("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")


# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def send_help(message: Message):
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/login <–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–ø–∞—Ä–æ–ª—å> - –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
        "/catalog - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —Ü–≤–µ—Ç–æ–≤\n"
        "/order <ID —Ü–≤–µ—Ç–∫–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç–æ–∫\n"
        "/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/logout - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
    )
    await message.reply(help_text)


# –ö–æ–º–∞–Ω–¥–∞ /profile
@dp.message(Command("profile"))
async def view_profile(message: Message):
    telegram_id = message.from_user.id
    user = await get_user_by_telegram_id(telegram_id)

    if user:
        profile = user.profile
        profile_info = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}\n"
            f"–ê–¥—Ä–µ—Å: {profile.address or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {profile.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"Email: {profile.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.date_joined.strftime('%Y-%m-%d')}\n"
        )
        await message.reply(profile_info)
    else:
        await message.reply("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.")


# –ö–æ–º–∞–Ω–¥–∞ /logout
@dp.message(Command("logout"))
async def logout_user(message: Message):
    telegram_id = message.from_user.id
    user = await get_user_by_telegram_id(telegram_id)

    if user:
        # –£–±–∏—Ä–∞–µ–º telegram_id –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await remove_telegram_id_from_profile(telegram_id)
        await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login.")
    else:
        await message.reply("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /login.")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è telegram_id –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
@sync_to_async
def remove_telegram_id_from_profile(telegram_id):
    try:
        profile = Profile.objects.get(telegram_id=telegram_id)
        profile.telegram_id = None
        profile.save()
    except Profile.DoesNotExist:
        pass


async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())